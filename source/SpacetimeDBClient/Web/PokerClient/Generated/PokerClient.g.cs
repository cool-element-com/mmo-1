// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteTables : RemoteTablesBase
    {
        public RemoteTables(DbConnection conn)
        {
            PokerGame = new(conn);
            PokerPlayer = new(conn);
        }
    }

    public sealed partial class SetReducerFlags
    {
        // Reducer flags can be set here if needed
    }

    public interface IRemoteDbContext : IDbContext<RemoteTables, RemoteReducers, SetReducerFlags, SubscriptionBuilder>
    {
        public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError;
    }

    public sealed class EventContext : IEventContext, IRemoteDbContext
    {
        private readonly DbConnection conn;

        public readonly Event<Reducer> Event;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
        public bool IsActive => conn.IsActive;
        public void Disconnect() => conn.Disconnect();
        public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
        public Identity? Identity => conn.Identity;
        public ConnectionId ConnectionId => conn.ConnectionId;

        public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }

        internal EventContext(DbConnection conn, Event<Reducer> Event)
        {
            this.conn = conn;
            this.Event = Event;
        }
    }

    public sealed class ReducerEventContext : IReducerEventContext, IRemoteDbContext
    {
        private readonly DbConnection conn;
        public readonly ReducerEvent<Reducer> Event;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
        public bool IsActive => conn.IsActive;
        public void Disconnect() => conn.Disconnect();
        public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
        public Identity? Identity => conn.Identity;
        public ConnectionId ConnectionId => conn.ConnectionId;

        public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }

        internal ReducerEventContext(DbConnection conn, ReducerEvent<Reducer> reducerEvent)
        {
            this.conn = conn;
            Event = reducerEvent;
        }
    }

    public sealed class ErrorContext : IErrorContext, IRemoteDbContext
    {
        private readonly DbConnection conn;
        public readonly Exception Event;
        Exception IErrorContext.Event => Event;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
        public bool IsActive => conn.IsActive;
        public void Disconnect() => conn.Disconnect();
        public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
        public Identity? Identity => conn.Identity;
        public ConnectionId ConnectionId => conn.ConnectionId;

        public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }

        internal ErrorContext(DbConnection conn, Exception error)
        {
            this.conn = conn;
            Event = error;
        }
    }

    public sealed class SubscriptionEventContext : ISubscriptionEventContext, IRemoteDbContext
    {
        private readonly DbConnection conn;

        public RemoteTables Db => conn.Db;
        public RemoteReducers Reducers => conn.Reducers;
        public SetReducerFlags SetReducerFlags => conn.SetReducerFlags;
        public bool IsActive => conn.IsActive;
        public void Disconnect() => conn.Disconnect();
        public SubscriptionBuilder SubscriptionBuilder() => conn.SubscriptionBuilder();
        public Identity? Identity => conn.Identity;
        public ConnectionId ConnectionId => conn.ConnectionId;

        public event Action<ReducerEventContext, Exception>? OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }

        internal SubscriptionEventContext(DbConnection conn)
        {
            this.conn = conn;
        }
    }

    public sealed class SubscriptionBuilder
    {
        private readonly IDbConnection conn;
        private event Action<SubscriptionEventContext>? Applied;
        private event Action<ErrorContext, Exception>? Error;

        public SubscriptionBuilder(IDbConnection conn)
        {
            this.conn = conn;
        }

        public SubscriptionBuilder OnApplied(Action<SubscriptionEventContext> callback)
        {
            Applied += callback;
            return this;
        }

        public SubscriptionBuilder OnError(Action<ErrorContext, Exception> callback)
        {
            Error += callback;
            return this;
        }

        public SubscriptionHandle Subscribe(string[] querySqls) => 
            new(conn, Applied, Error, querySqls);

        public void SubscribeToAllTables()
        {
            new SubscriptionHandle(conn, Applied, new string[] { "SELECT * FROM *" });
        }
    }

    public sealed class SubscriptionHandle : SubscriptionHandleBase<SubscriptionEventContext, ErrorContext>
    {
        public SubscriptionHandle(IDbConnection conn, Action<SubscriptionEventContext>? onApplied, string[] querySqls) 
            : base(conn, onApplied, querySqls) { }

        public SubscriptionHandle(IDbConnection conn, Action<SubscriptionEventContext>? onApplied, 
            Action<ErrorContext, Exception>? onError, string[] querySqls) 
            : base(conn, onApplied, onError, querySqls) { }
    }

    public sealed class DbConnection : DbConnectionBase<DbConnection, RemoteTables, Reducer>
    {
        public override RemoteTables Db { get; }
        public readonly RemoteReducers Reducers;
        public readonly SetReducerFlags SetReducerFlags = new();

        public DbConnection()
        {
            Db = new(this);
            Reducers = new(this, SetReducerFlags);
        }

        protected override Reducer ToReducer(TransactionUpdate update)
        {
            var encodedArgs = update.ReducerCall.Args;
            return update.ReducerCall.ReducerName switch
            {
                "create_poker_game" => BSATNHelpers.Decode<Reducer.CreatePokerGame>(encodedArgs),
                "join_poker_game" => BSATNHelpers.Decode<Reducer.JoinPokerGame>(encodedArgs),
                "place_poker_bet" => BSATNHelpers.Decode<Reducer.PlacePokerBet>(encodedArgs),
                "fold_poker_hand" => BSATNHelpers.Decode<Reducer.FoldPokerHand>(encodedArgs),
                var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        protected override IEventContext ToEventContext(Event<Reducer> Event) =>
            new EventContext(this, Event);

        protected override IReducerEventContext ToReducerEventContext(ReducerEvent<Reducer> reducerEvent) =>
            new ReducerEventContext(this, reducerEvent);

        protected override ISubscriptionEventContext MakeSubscriptionEventContext() =>
            new SubscriptionEventContext(this);

        protected override IErrorContext ToErrorContext(Exception exception) =>
            new ErrorContext(this, exception);

        protected override bool Dispatch(IReducerEventContext context, Reducer reducer)
        {
            var eventContext = (ReducerEventContext)context;
            return reducer switch
            {
                Reducer.CreatePokerGame args => Reducers.InvokeCreatePokerGame(eventContext, args),
                Reducer.JoinPokerGame args => Reducers.InvokeJoinPokerGame(eventContext, args),
                Reducer.PlacePokerBet args => Reducers.InvokePlacePokerBet(eventContext, args),
                Reducer.FoldPokerHand args => Reducers.InvokeFoldPokerHand(eventContext, args),
                _ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
            };
        }

        public SubscriptionBuilder SubscriptionBuilder() => new(this);
        
        public event Action<ReducerEventContext, Exception> OnUnhandledReducerError
        {
            add => Reducers.InternalOnUnhandledReducerError += value;
            remove => Reducers.InternalOnUnhandledReducerError -= value;
        }
    }
}