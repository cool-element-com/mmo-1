// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.BSATN;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    [DataContract]
    public partial class PokerGame : ITable<PokerGame>
    {
        [DataMember(Name = "game_id")]
        public string GameId { get; set; } = "";

        [DataMember(Name = "name")]
        public string Name { get; set; } = "";

        [DataMember(Name = "status")]
        public string Status { get; set; } = "";

        [DataMember(Name = "current_round")]
        public uint CurrentRound { get; set; }

        [DataMember(Name = "pot_amount")]
        public ulong PotAmount { get; set; }

        [DataMember(Name = "buy_in")]
        public ulong BuyIn { get; set; }

        [DataMember(Name = "max_players")]
        public uint MaxPlayers { get; set; }

        [DataMember(Name = "created_at")]
        public ulong CreatedAt { get; set; }

        [DataMember(Name = "updated_at")]
        public ulong UpdatedAt { get; set; }

        public static string TableName => "PokerGame";
        
        // Helper properties for UI
        public decimal PotAmountDecimal => PotAmount / 100m;
        public decimal BuyInDecimal => BuyIn / 100m;
        public DateTime CreatedAtDateTime => DateTimeOffset.FromUnixTimeMilliseconds((long)CreatedAt).DateTime;
        public DateTime UpdatedAtDateTime => DateTimeOffset.FromUnixTimeMilliseconds((long)UpdatedAt).DateTime;
    }

    [DataContract]
    public partial class PokerPlayer : ITable<PokerPlayer>
    {
        [DataMember(Name = "player_id")]
        public string PlayerId { get; set; } = "";

        [DataMember(Name = "game_id")]
        public string GameId { get; set; } = "";

        [DataMember(Name = "name")]
        public string Name { get; set; } = "";

        [DataMember(Name = "chips")]
        public ulong Chips { get; set; }

        [DataMember(Name = "is_active")]
        public bool IsActive { get; set; }

        [DataMember(Name = "is_folded")]
        public bool IsFolded { get; set; }

        [DataMember(Name = "current_bet")]
        public ulong CurrentBet { get; set; }

        [DataMember(Name = "joined_at")]
        public ulong JoinedAt { get; set; }

        public static string TableName => "PokerPlayer";

        // Helper properties for UI
        public decimal ChipsDecimal => Chips / 100m;
        public decimal CurrentBetDecimal => CurrentBet / 100m;
        public DateTime JoinedAtDateTime => DateTimeOffset.FromUnixTimeMilliseconds((long)JoinedAt).DateTime;
    }

    public sealed partial class RemoteTables
    {
        public sealed class PokerGameHandle : RemoteTableHandle<EventContext, PokerGame>
        {
            protected override string RemoteTableName => "PokerGame";

            public sealed class GameIdUniqueIndex : UniqueIndexBase<string>
            {
                protected override string GetKey(PokerGame row) => row.GameId;
                public GameIdUniqueIndex(PokerGameHandle table) : base(table) { }
            }

            public readonly GameIdUniqueIndex GameId;

            internal PokerGameHandle(DbConnection conn) : base(conn)
            {
                GameId = new(this);
            }

            protected override object GetPrimaryKey(PokerGame row) => row.GameId;
        }

        public sealed class PokerPlayerHandle : RemoteTableHandle<EventContext, PokerPlayer>
        {
            protected override string RemoteTableName => "PokerPlayer";

            public sealed class PlayerIdUniqueIndex : UniqueIndexBase<string>
            {
                protected override string GetKey(PokerPlayer row) => row.PlayerId;
                public PlayerIdUniqueIndex(PokerPlayerHandle table) : base(table) { }
            }

            public readonly PlayerIdUniqueIndex PlayerId;

            internal PokerPlayerHandle(DbConnection conn) : base(conn)
            {
                PlayerId = new(this);
            }

            protected override object GetPrimaryKey(PokerPlayer row) => row.PlayerId;

            public IEnumerable<PokerPlayer> FilterByGameId(string gameId)
            {
                return this.Where(p => p.GameId == gameId);
            }
        }

        public readonly PokerGameHandle PokerGame;
        public readonly PokerPlayerHandle PokerPlayer;
    }
}