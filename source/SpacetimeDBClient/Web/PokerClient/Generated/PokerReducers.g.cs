// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.BSATN;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;

namespace SpacetimeDB.Types
{
    public abstract partial class Reducer
    {
        [DataContract]
        public sealed class CreatePokerGame : Reducer
        {
            [DataMember(Name = "game_name")]
            public string GameName { get; set; } = "";

            [DataMember(Name = "buy_in")]
            public ulong BuyIn { get; set; }

            [DataMember(Name = "max_players")]
            public uint MaxPlayers { get; set; }
        }

        [DataContract]
        public sealed class JoinPokerGame : Reducer
        {
            [DataMember(Name = "game_id")]
            public string GameId { get; set; } = "";

            [DataMember(Name = "player_name")]
            public string PlayerName { get; set; } = "";
        }

        [DataContract]
        public sealed class PlacePokerBet : Reducer
        {
            [DataMember(Name = "game_id")]
            public string GameId { get; set; } = "";

            [DataMember(Name = "player_id")]
            public string PlayerId { get; set; } = "";

            [DataMember(Name = "amount")]
            public ulong Amount { get; set; }
        }

        [DataContract]
        public sealed class FoldPokerHand : Reducer
        {
            [DataMember(Name = "game_id")]
            public string GameId { get; set; } = "";

            [DataMember(Name = "player_id")]
            public string PlayerId { get; set; } = "";
        }
    }

    public sealed partial class RemoteReducers : RemoteBase
    {
        // CreatePokerGame reducer
        public Task<string> CreatePokerGame(string gameName, ulong buyIn, uint maxPlayers)
        {
            return InvokeReducerAsync<string>("create_poker_game", new Reducer.CreatePokerGame
            {
                GameName = gameName,
                BuyIn = buyIn,
                MaxPlayers = maxPlayers
            });
        }

        public void OnCreatePokerGame(Action<ReducerEventContext, Reducer.CreatePokerGame> callback)
        {
            OnReducer("create_poker_game", callback);
        }

        // JoinPokerGame reducer
        public Task<string> JoinPokerGame(string gameId, string playerName)
        {
            return InvokeReducerAsync<string>("join_poker_game", new Reducer.JoinPokerGame
            {
                GameId = gameId,
                PlayerName = playerName
            });
        }

        public void OnJoinPokerGame(Action<ReducerEventContext, Reducer.JoinPokerGame> callback)
        {
            OnReducer("join_poker_game", callback);
        }

        // PlacePokerBet reducer
        public Task PlacePokerBet(string gameId, string playerId, ulong amount)
        {
            return InvokeReducerAsync("place_poker_bet", new Reducer.PlacePokerBet
            {
                GameId = gameId,
                PlayerId = playerId,
                Amount = amount
            });
        }

        public void OnPlacePokerBet(Action<ReducerEventContext, Reducer.PlacePokerBet> callback)
        {
            OnReducer("place_poker_bet", callback);
        }

        // FoldPokerHand reducer
        public Task FoldPokerHand(string gameId, string playerId)
        {
            return InvokeReducerAsync("fold_poker_hand", new Reducer.FoldPokerHand
            {
                GameId = gameId,
                PlayerId = playerId
            });
        }

        public void OnFoldPokerHand(Action<ReducerEventContext, Reducer.FoldPokerHand> callback)
        {
            OnReducer("fold_poker_hand", callback);
        }

        internal bool InvokeCreatePokerGame(ReducerEventContext ctx, Reducer.CreatePokerGame args)
        {
            return InvokeEvent(ctx, "create_poker_game", args);
        }

        internal bool InvokeJoinPokerGame(ReducerEventContext ctx, Reducer.JoinPokerGame args)
        {
            return InvokeEvent(ctx, "join_poker_game", args);
        }

        internal bool InvokePlacePokerBet(ReducerEventContext ctx, Reducer.PlacePokerBet args)
        {
            return InvokeEvent(ctx, "place_poker_bet", args);
        }

        internal bool InvokeFoldPokerHand(ReducerEventContext ctx, Reducer.FoldPokerHand args)
        {
            return InvokeEvent(ctx, "fold_poker_hand", args);
        }
    }
}